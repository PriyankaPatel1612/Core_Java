#Class,Object and Instance variable

Variable
-->Local
      variable which declared inside the method are local variable.
-->Instance(or, non-static variable) /Class(or, static variable) 
      variable declared inside the class can be instance or static variable/class variable.

      case1: instance variable/ non-satic variable
      A variable is said to be instance when it is declared inside the class.
      case2: class variable/static variable
      A variable is said to be static or class when it is declared inside the class or static keyword
is written before variable.

Points to note:
-->we cannot access instance variable in method without creating object.
-->case1: because in java main method is static, and static method can only access static variables without object.
     case2: when we are declaring instance variable inside the class then the memory is not allocated, for allocating memory to the instance variable we have to create object.
-->to access instance or non-static variable we have to create object.

Object
-->In java a variable of class type is called a reference.
     example: Test t1;                //t1 is reference (memory not allocated, to allocate memory we have to create object)
-->In cpp constructor called automatically by creating object but,
      In java we have to create an object and call constructor
      example: Test t1 = new Test();   //t1 is object(memory is allocated, new keyword allocates the memory)

##if we declare instance variable of type int,float,double,byte then it will initialized with zero, and in char it will initialized with zero by the character form \u0000 like this, similarly in bool it will initialized with false because the value of false is zero.

##When we try to print obj then toString() method is called initially then it prints the address of the object for example:
Test@abcd1234  --->  (classname@hashcode)     //@ is seprator
if we want to print only hashcode then we can use hashCode() method it will print the hashcode in integer form.

##JVM recognize objects by its hashcode it creates hashcodes when we creating objects.
like how many objects we create, it gives different hashcodes to objects.
all hashcodes are different because the case arises where objects have same name that's why the hashcodes are different like students have their enrollment. 

##Mutability of object
variable of class type is a reference
it is capable to hold the hashcode of another object and, 
it allows to make changes in the value of object.
this concept is known as mutability
-->mutability of object means that another object have authority to hold and change the value of obj. In other words means one or another object is mutually able to change the value of objects.

Constructors
// name of constructor is same as class name
// doesn't have any return type
// we are not allowed to return anything
// three types of Constructors
// default
// no argument
// copy constructor
// there is no class without constructor
// if required then we create constructor otherwise system create default constructor
// we cannot inherit Constructors
// if we want to create an object then it is compulsory to call constructor and to call constructor new keyword is required.

var args
if want to pass many arguments without using array then we can use ellipsis
"...a"
if we arrguments in ellipsis then it will treat as array
we can values as an argument, ...a (ellipsis a) take arguments and then used as array elements but the difference is that after the summation of elements it releases memory.
if we want to take many arguments
void add(int ...a,int x)  this is invalid ellipsis must be the last perimeter

#static keyword
it can be used in three ways--
variable declaration
method declaration
static block
-->Properties<--
It's a class variable 
when the class loads memory is allocated to static variable
it means the memory alloacation of static memory is dependent on loading of class rather than creation of object like instance variable
It also means that there will only exist a single copy of static variable for all the objects,and all the objects will share the commonly allocated memory.
Objects are not allowed create separate memory for static variables
As the static object are independent from objects then we can acces them without any object directly through the class name.
Static method is also independent from the object 
It is compulsion that static method can have either static variables or local variable
Static block is similar to static method but the only difference is that it has more priority than main method

#inheritance
It is the property in which the class can aquire the property of another class
-->Single level inheritance<--
single parent single child class in program
-->Multilevel inheritance<--
a child class can be act like parent class then it is multilevel inheritance
-->Hierarchical Inheritance<--
a class having more than one child class
-->Multilevel Inheritance<--
a class having more than one parent class. It can be achieved by using interface.
-->Hybrid Inheritance<--
combination of multiple and hirarchical inheritance.

#behaviours of constructors in inheritance
when the child class object is created then the first it will call its parent constructor then child constructor is called

#Reference of parent class can hold the object of child class

#Method Overriding

#Runtime polymorphism/Dynamic method dispatch

#final keyword

#abstract keyword
-->we can't create object of abstract class
-->it is compulsion that abstract method should be contain in abstract class
-->all the abstract method should be implented in child classes

#interface 
-->pure abstract form of classs
-->public abstract by deafault written before class name
-->it means child class should have define all the abstract method of parent class
-->class extends class, class implements interface, interface extends interface, class extends class implements interface1,interface2
