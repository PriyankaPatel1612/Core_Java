//String

String class contains two classes 
-->String Buffer
-->String Builder

Buffer - Temporary storage area
String Buffer- it utilizes the buffer memory
String Builder- it count the data and create array of that size and build an string.

everything written inside the inverted commas are object.
for example
String str = new String("Hello");
Hello is an object

In String if we want to print obj then it will not print hashcode or calls toString method, the string will be printed
because of some security reasons hashcode is not printed

but hashcode in integer can be printed by using hashCode() method

In String class we .length() method(we used array.length in array but it used for variable) in string we use length method because it is an object 


#Pool memory
#Shared memory

-->string object have two addresses physical or logical<--
 
logical address-- which is generated by some logic like the hashcode of "Hello" is same for all the systems and the hashcode of hello is generated by some logic and it is fixed. generated by formula or fixed.

physical address--this hashcode is not fixed for all the system it depends. the hashcodes which are not fixed are physical.

#Operators--physical address
example--
if we compare string objects using operator then it works on physical address that can be differ.

String str1 = new String("hello");
String str2 = new String("hello");
if(str1==str2)
{
  sout("same");
}else{
sout("not same");
}
output: not same because operators work on physical address not on logical or the address/hashcode of string obj is different. If the physical address is different pool memory

#Method--logical address
In case of methods if we compare than it works on logical address. if we take example then

String str1 = new String("hello");
String str2 = new String("hello");
if(str1.toString()==str2.toString())
{
  sout("same");
}else{
sout("not same");
}

output: same because toString is method and it compares the hascodes of both string logical address which will be same, if the logical address same shared memory.

-->boolean equals(String str)
System.out.print(str.equals(str2));
it compares the logical addressess of str object. it is case sensitive(enhances security like password). 

-->boolean equalsIgnoreCase(String str)
System.out.print(str.equalsIgnoreCase(str2));
it compare the logical address of str but it is not case sensitive(enhances usernames ).

#compareTo()

-->int compareTo(String)
 it returns the difference of string by comparing both string obj

-->int compareToIgnoreCase(String)
it returns the difference of string by comparing both string by ignoring case

#char charAt(int index)
it returns the char at given index

#toUpperCase()
it coverts the characters into upper case

#toLowerCase()
it converts the characters into lower case

#int indexOf(char ch)
it returns the index of String characters by given character, in case of same letters it returns index of first occuring character.

#int indexOf(char ch, int index)
it returns the index of string characters at given character and index
"In the case of indexOf used for characters, when the same letters occurs different then it returns the same index of first occuring character everytime."

#int indexOf(String)
same as above method only the difference is we pass string and it returns the index of that string

#int indexOf(String, int index)
same as above method only the difference is we pass string with index and it returns the index of that string

#trim()
it removes the leading and trailing spaces, and it doesn't take any parameter and returns anything

#string array
  for searching-
  { we can use indexOf method, in this method when we use then we can find elements for example if we have to find the array    element which is starting with "ind" then we can use indexOf()  method by passing parameter ind if the word is starting with ind than it returns index 0.
  we can also used for searching like the word or element if containing "in" then we again use indexOf() method by passing pararmeter "in" if it conatains in then it returns the index or not then returns -1.
 }
  for sorting
  { similary we sorted array elements, in strings we use compareTo() method because it returns the differnece of string if the strings are greater then it will returns positive no and if less then it returns negative no. according to that we can compare string and sort that.
  }

#


